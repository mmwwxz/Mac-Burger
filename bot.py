import telebotimport osfrom dotenv import load_dotenvfrom telebot import typesfrom datetime import datetimeload_dotenv()TOKEN = os.getenv('TOKEN')bot = telebot.TeleBot(TOKEN)# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èuser_data = {}# –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∏—Ü—Ü—ãpizza_photos = {    "bbq_pizza": "Barbeku.jpg",    "italian_pizza": "Italiano.jpg",    "fajita_pizza": "Fahita.jpg",    "four_cheese_pizza": "Pizza4cheese.jpg",    "pepperoni_pizza": "Peperoni.jpg",    "cheese_lovers_pizza": "CheeseLovers.jpg",    "hot_chili_pizza": "HotChili.jpg",    "pollo_veggi_pizza": "PoloVezhi.jpg",    "mac_chicken_alfredo_pizza": "Alfredo.jpg",    "hawaiian_pizza": "Gavaiskaia.jpg",    "meat_lovers_pizza": "MeatLovers.jpg"}# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µdef save_order_data(chat_id):    filename = "orders.txt"    order_data = {        "–Ω–æ–º–µ—Ä": user_data[chat_id]['phone'],        "–ø–∏—Ü—Ü–∞": user_data[chat_id]['pizza'],        "—Ä–∞–∑–º–µ—Ä": user_data[chat_id]['size'],        "–∞–¥—Ä–µ—Å": user_data[chat_id]['address'],        "–≤—Ä–µ–º—è": user_data[chat_id]['time'].strftime('%Y-%m-%d %H:%M:%S')    }    with open(filename, 'a', encoding='utf-8') as file:        file.write(f"–ó–∞–∫–∞–∑ –æ—Ç —á–∞—Ç–∞ ID: {chat_id}\n")        for key, value in order_data.items():            file.write(f"{key}: {value}\n")        file.write("\n")# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èdef save_order_to_history(chat_id):    if 'orders' not in user_data[chat_id]:        user_data[chat_id]['orders'] = []    order_data = {        "–Ω–æ–º–µ—Ä": user_data[chat_id]['phone'],        "–ø–∏—Ü—Ü–∞": user_data[chat_id]['pizza'],        "—Ä–∞–∑–º–µ—Ä": user_data[chat_id]['size'],        "–∞–¥—Ä–µ—Å": user_data[chat_id]['address'],        "–≤—Ä–µ–º—è": datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è    }    user_data[chat_id]['orders'].append(order_data)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É"def send_order_confirmation(chat_id):    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)    item = types.KeyboardButton("üçï–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É")    item_history = types.KeyboardButton("‚è≥–ò—Å—Ç–æ—Ä–∏—è")    markup.add(item, item_history)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å—Ç–æ—Ä–∏—è"    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑, –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!", reply_markup=markup)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"def send_back_button(chat_id):    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)    item = types.KeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥")    markup.add(item)    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ@bot.message_handler(commands=['start'])def start(message):    chat_id = message.chat.id    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)    item = types.KeyboardButton("üçï–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É")    item_history = types.KeyboardButton("‚è≥–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")    markup.add(item, item_history)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å—Ç–æ—Ä–∏—è"    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ '–ò—Å—Ç–æ—Ä–∏—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.", reply_markup=markup)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ orders.txt –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤def read_orders_from_file():    orders = []    try:        with open("orders.txt", "r", encoding="utf-8") as file:            lines = file.read().split("\n")            current_order = None            for line in lines:                if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏                    key, value = line.split(": ")                    if key == "–ó–∞–∫–∞–∑ –æ—Ç —á–∞—Ç–∞ ID":                        if current_order:                            orders.append(current_order)                        current_order = {"–ß–∞—Ç ID": value.strip()}                    else:                        current_order[key] = value.strip()            if current_order:                orders.append(current_order)    except FileNotFoundError:        pass    return orders# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò—Å—Ç–æ—Ä–∏—è" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤@bot.message_handler(func=lambda message: message.text == "‚è≥–ò—Å—Ç–æ—Ä–∏—è")def show_order_history(message):    chat_id = message.chat.id    # –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞    orders = read_orders_from_file()    if orders:        markup = types.InlineKeyboardMarkup(row_width=1)        for i, order in enumerate(orders, start=1):            chat_id_order = order.get('–ß–∞—Ç ID', '')            button_text = f"–ó–∞–∫–∞–∑ #{i}"            callback_data = f"view_order_{i}"            button = types.InlineKeyboardButton(button_text, callback_data=callback_data)            markup.add(button)        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)    else:        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞@bot.callback_query_handler(func=lambda call: call.data.startswith("view_order_"))def view_order(call):    chat_id = call.message.chat.id    order_number = int(call.data.split("_")[2])    # –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞    orders = read_orders_from_file()    if 0 < order_number <= len(orders):        order = orders[order_number - 1]        order_info = "\n".join([f"{key}: {value}" for key, value in order.items()])        bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_number}:\n{order_info}")    else:        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")@bot.message_handler(func=lambda message: message.text == "üçï–ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É")def order_pizza(message):    chat_id = message.chat.id    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")    bot.register_next_step_handler(message, get_phone)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞def get_phone(message):    chat_id = message.chat.id    phone = message.text    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 12 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 996    if len(phone) == 12 and phone.startswith("996") and phone[3:].isdigit():        user_data[chat_id] = {'phone': phone}        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)        item = types.KeyboardButton("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ")        markup.add(item)        item = types.KeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å")        markup.add(item)        bot.send_message(chat_id, f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup)        bot.register_next_step_handler(message, confirm_phone)    else:        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å 996 –∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 12 —Ü–∏—Ñ—Ä (–±–µ–∑ +).")        bot.register_next_step_handler(message, get_phone)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞def confirm_phone(message):    chat_id = message.chat.id    text = message.text    if text == "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ":        markup = types.ReplyKeyboardRemove(selective=False)        bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É.", reply_markup=markup)        show_pizza_menu(chat_id)    elif text == "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å":        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")        bot.register_next_step_handler(message, get_phone)    else:        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ\" –∏–ª–∏ \"‚ùå –ò–∑–º–µ–Ω–∏—Ç—å\".")        bot.register_next_step_handler(message, confirm_phone)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–∏—Ü—Ü—ãdef show_pizza_menu(chat_id):    markup = types.InlineKeyboardMarkup(row_width=1)    pizza_menu = [        ("üçï–ë–∞—Ä–±–µ–∫—é –ü–∏—Ü—Ü–∞ —Å –∫—É—Ä–∏—Ü–µ–π", "bbq_pizza"),        ("üçï–ò—Ç–∞–ª—å—è–Ω–æ –ü–∏—Ü—Ü–∞ —Å –∫—É—Ä–∏—Ü–µ–π", "italian_pizza"),        ("üçï–§–∞—Ö–∏—Ç–∞", "fajita_pizza"),        ("üçï–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", "four_cheese_pizza"),        ("üçï–ü–µ–ø–µ—Ä–æ–Ω–∏ –ü–∏—Ü—Ü–∞", "pepperoni_pizza"),        ("üçï–ß–∏–∑ –õ–æ–≤–µ—Ä—Å", "cheese_lovers_pizza"),        ("üçï–•–æ—Ç –ß–∏–ª–∏ –ü–∏—Ü—Ü–∞", "hot_chili_pizza"),        ("üçï–ü–æ–ª–æ –í–µ–∂–∂–∏ –ü–∏—Ü—Ü–∞", "pollo_veggi_pizza"),        ("üçï–ú–∞–∫ –ö—É—Ä–∏—Ü–∞ –ê–ª—å—Ñ—Ä–µ–¥–æ –ü–∏—Ü—Ü–∞", "mac_chicken_alfredo_pizza"),        ("üçï–ì–∞–≤–∞–π—Å–∫–∞—è –ü–∏—Ü—Ü–∞", "hawaiian_pizza"),        ("üçïMeat Lover's Pizza", "meat_lovers_pizza")    ]    for pizza_name, pizza_id in pizza_menu:        button = types.InlineKeyboardButton(pizza_name, callback_data=pizza_id)        markup.add(button)    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é:", reply_markup=markup)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å –ø–∏—Ü—Ü–µ–π@bot.callback_query_handler(    func=lambda call: call.data in pizza_photos.keys())def pizza_selection(call):    chat_id = call.message.chat.id    pizza_id = call.data    user_data[chat_id]['pizza'] = pizza_id    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ü—Ü—ã    photo_path = pizza_photos[pizza_id]    bot.send_photo(chat_id, open(photo_path, 'rb'))    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏    markup = types.InlineKeyboardMarkup(row_width=2)    sizes = ["13—Å–º - 185—Å–æ–º", "18—Å–º - 350—Å–æ–º", "30—Å–º - 495—Å–æ–º", "40—Å–º - 745—Å–æ–º"]    for size in sizes:        button = types.InlineKeyboardButton(size, callback_data=size)        markup.add(button)    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"    back_button = types.InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="back_to_pizza_selection")    markup.add(back_button)    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–∑–∞–¥\" –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=markup)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏–ª–∏ –ø–∏—Ü—Ü—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞@bot.callback_query_handler(func=lambda call: call.data in pizza_photos.keys() or call.data == "back_to_pizza_selection")def pizza_or_back_selection(call):    chat_id = call.message.chat.id    if call.data == "back_to_pizza_selection":        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ü—Ü—ã        show_pizza_menu(chat_id)    else:        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –ø–∏—Ü—Ü–µ–π, —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–∏—Ü—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ        pizza_id = call.data        user_data[chat_id]['pizza'] = pizza_id        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∏—Ü—Ü—ã        photo_path = pizza_photos[pizza_id]        bot.send_photo(chat_id, open(photo_path, 'rb'))        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏        markup = types.InlineKeyboardMarkup(row_width=2)        sizes = ["13—Å–º - 185—Å–æ–º", "18—Å–º - 350—Å–æ–º", "30—Å–º - 495—Å–æ–º", "40—Å–º - 745—Å–æ–º"]        for size in sizes:            button = types.InlineKeyboardButton(size, callback_data=size)            markup.add(button)        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"        back_button = types.InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="back_to_pizza_selection")        markup.add(back_button)        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–∑–∞–¥\" –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=markup)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–∏—Ü—Ü—ã@bot.callback_query_handler(func=lambda call: call.data in ["13—Å–º - 185—Å–æ–º", "18—Å–º - 350—Å–æ–º", "30—Å–º - 495—Å–æ–º", "40—Å–º - 745—Å–æ–º"])def size_selection(call):    chat_id = call.message.chat.id    user_data[chat_id]['size'] = call.data    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")    bot.register_next_step_handler(call.message, get_address)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è–ù–∞–∑–∞–¥")def go_back(message):    chat_id = message.chat.id    send_back_button(chat_id)# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞def get_address(message):    chat_id = message.chat.id    address = message.text    user_data[chat_id]['address'] = address    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è    user_data[chat_id]['time'] = datetime.now()    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É    order_info = f"–ù–æ–º–µ—Ä: {user_data[chat_id]['phone']}\n–ü–∏—Ü—Ü–∞: {user_data[chat_id]['pizza']}\n–†–∞–∑–º–µ—Ä: {user_data[chat_id]['size']}\n–ê–¥—Ä–µ—Å: {address}\n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {user_data[chat_id]['time'].strftime('%Y-%m-%d %H:%M:%S')}"    bot.send_message(-1001876571035, order_info)  # –ó–∞–º–µ–Ω–∏—Ç–µ GROUP_CHAT_ID –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ    save_order_data(chat_id)    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è    save_order_to_history(chat_id)    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞    send_order_confirmation(chat_id)# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò—Å—Ç–æ—Ä–∏—è" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤@bot.message_handler(func=lambda message: message.text == "‚è≥–ò—Å—Ç–æ—Ä–∏—è")def show_order_history(message):    chat_id = message.chat.id    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤    if chat_id in user_data:        orders = user_data[chat_id].get('orders', [])        if orders:            markup = types.InlineKeyboardMarkup(row_width=1)            for i, order in enumerate(orders, start=1):                pizza_name = order['pizza']                order_time = order['time']                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–æ–ª–±—ç–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞                callback_data = f"view_order_{i}"                button_text = f"{pizza_name} ({order_time.strftime('%Y-%m-%d %H:%M:%S')})"                button = types.InlineKeyboardButton(button_text, callback_data=callback_data)                markup.add(button)            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)        else:            bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")    else:        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")@bot.callback_query_handler(func=lambda call: call.data.startswith("view_order_"))def view_order(call):    chat_id = call.message.chat.id    order_number = int(call.data.split("_")[2])    if chat_id in user_data and 'orders' in user_data[chat_id] and 0 < order_number <= len(user_data[chat_id]['orders']):        order = user_data[chat_id]['orders'][order_number - 1]        if '–Ω–æ–º–µ—Ä' in order and '–ø–∏—Ü—Ü–∞' in order and '—Ä–∞–∑–º–µ—Ä' in order and '–∞–¥—Ä–µ—Å' in order and '–≤—Ä–µ–º—è' in order:            order_info = f"–ù–æ–º–µ—Ä: {order['–Ω–æ–º–µ—Ä']}\n–ü–∏—Ü—Ü–∞: {order['–ø–∏—Ü—Ü–∞']}\n–†–∞–∑–º–µ—Ä: {order['—Ä–∞–∑–º–µ—Ä']}\n–ê–¥—Ä–µ—Å: {order['–∞–¥—Ä–µ—Å']}\n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order['–≤—Ä–µ–º—è']}"            bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_number}:\n{order_info}")        else:            bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")    else:        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")if __name__ == "__main__":    bot.polling(none_stop=True)